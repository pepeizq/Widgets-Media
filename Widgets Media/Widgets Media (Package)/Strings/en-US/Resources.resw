<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnyMedia" xml:space="preserve">
    <value>Any Streaming</value>
  </data>
  <data name="Arguments.Text" xml:space="preserve">
    <value>Arguments</value>
  </data>
  <data name="Bottom.Text" xml:space="preserve">
    <value>Bottom</value>
  </data>
  <data name="Center.Text" xml:space="preserve">
    <value>Center</value>
  </data>
  <data name="ChooseImage.Text" xml:space="preserve">
    <value>Choose the type of image before preloading the Widget:</value>
  </data>
  <data name="ChooseImageBig" xml:space="preserve">
    <value>The big image is best suited for medium and large size widgets.</value>
  </data>
  <data name="ChooseImageSmall" xml:space="preserve">
    <value>The small image is best suited to the small size widget.</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Contact.Text" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="Customization.Text" xml:space="preserve">
    <value>Customization</value>
  </data>
  <data name="Data.Text" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="Executable.Text" xml:space="preserve">
    <value>Executable</value>
  </data>
  <data name="ImageBig.Text" xml:space="preserve">
    <value>Big Image</value>
  </data>
  <data name="ImageSmall.Text" xml:space="preserve">
    <value>Small Image</value>
  </data>
  <data name="Left.Text" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="MenuContact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="MenuExit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="MenuGithub" xml:space="preserve">
    <value>Source Code</value>
  </data>
  <data name="MenuPatchNotes" xml:space="preserve">
    <value>Last Patch Notes</value>
  </data>
  <data name="MenuRate" xml:space="preserve">
    <value>Rate the App</value>
  </data>
  <data name="NoGamesBBDDMessage1.Text" xml:space="preserve">
    <value>There are games that you have installed and have not been detected by the app.</value>
  </data>
  <data name="NoGamesBBDDMessage2.Text" xml:space="preserve">
    <value>If you want to help with the app, you can contact with the developer saying what games and ids are missing.</value>
  </data>
  <data name="NoGamesDetected.Text" xml:space="preserve">
    <value>No Games Detected</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="OptionsApp.Text" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="OptionsAppCleanButton.Text" xml:space="preserve">
    <value>Clean Data</value>
  </data>
  <data name="OptionsAppCleanInfo.Text" xml:space="preserve">
    <value>Press the button to clear all the data generated by the application, the application will be restarted.</value>
  </data>
  <data name="OptionsAppWindow1.Text" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="OptionsAppWindow2.Text" xml:space="preserve">
    <value>Full Screen</value>
  </data>
  <data name="OptionsAppWindow3.Text" xml:space="preserve">
    <value>Overlapped</value>
  </data>
  <data name="OptionsAppWindowInfo.Text" xml:space="preserve">
    <value>Select in which way you want the application to be displayed in Windows:</value>
  </data>
  <data name="OptionsLanguage.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="OptionsLanguageInfo.Text" xml:space="preserve">
    <value>Select the language of the application, a restart is necessary in the application to make the change.</value>
  </data>
  <data name="PresentationMessage.Text" xml:space="preserve">
    <value>Select the platform where you have the game to add as a widget:</value>
  </data>
  <data name="Right.Text" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="Search.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SpotifyGoOptions.Text" xml:space="preserve">
    <value>If you want to add Widgets from your Spotify albums or playlists, you must go to Options and follow the instructions to configure it.</value>
  </data>
  <data name="SpotifyGoOptions2.Text" xml:space="preserve">
    <value>Go to Options</value>
  </data>
  <data name="SpotifyOptions.Text" xml:space="preserve">
    <value>Due to the restrictions in the Spotify API, if you want to add a widget from this platform you must create an app in the developer section:</value>
  </data>
  <data name="SpotifyOptionsHelp.Text" xml:space="preserve">
    <value>Show where it's done</value>
  </data>
  <data name="SpotifyOptionsOpenLink" xml:space="preserve">
    <value>Open Link to Spotify Developers</value>
  </data>
  <data name="StoreDescription" xml:space="preserve">
    <value>Add widgets from your Steam games to the Windows 11 Widgets app. 

Once you've added a game widget you can run it from the Widget app.</value>
  </data>
  <data name="Top.Text" xml:space="preserve">
    <value>Top</value>
  </data>
  <data name="TrialBuyApp.Text" xml:space="preserve">
    <value>Buy App</value>
  </data>
  <data name="TrialMessage.Text" xml:space="preserve">
    <value>You are using a trial version of the app, you can only add 1 widget.</value>
  </data>
  <data name="WidgetImageOrientation.Text" xml:space="preserve">
    <value>Alignment of the image in the Widget:</value>
  </data>
  <data name="WidgetImageOrientationHorizontal.Text" xml:space="preserve">
    <value>Horizontal</value>
  </data>
  <data name="WidgetImageOrientationVertical.Text" xml:space="preserve">
    <value>Vertical</value>
  </data>
  <data name="WidgetLoadGame.Text" xml:space="preserve">
    <value>Load game in app Widgets</value>
  </data>
  <data name="WidgetLoadGameMessage" xml:space="preserve">
    <value>Game widget loaded, open the Widgets app and add the game widget from 'Add Widgets'.</value>
  </data>
</root>